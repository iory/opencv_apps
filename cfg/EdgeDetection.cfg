#! /usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2014, Kei Okada.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Kei Okada nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


PACKAGE='edge_detection'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("use_camera_info", bool_t, 0, "Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used.", True)

edge_type = gen.enum([ gen.const("Sobel",   int_t,  0, "Sobel Derivatives"),
                       gen.const("Laplace", int_t,  1, "Laplace Operator"),
                       gen.const("Canny",   int_t,  2, "Canny Edge Detector"),
                       gen.const("LineSegmentDetector",   int_t,  3, "Line Segment Detector")], "An enum for Edge Detection Mehtods")
gen.add("edge_type", int_t, 0, "Edge Detection Methods", 0, 0, 3, edit_method=edge_type)

gen.add("canny_threshold1", int_t, 0, "First threshold for the hysteresis procedure.", 100, 0, 500)
gen.add("canny_threshold2", int_t, 0, "Second threshold for the hysteresis procedure.", 200, 0, 500)

gen.add("apertureSize", int_t,    0, "Aperture size for the Sobel() operator.", 3, 1, 10)

gen.add("apply_blur_pre",   bool_t,   0, "Flag, applying Blur() to input image", True)

gen.add("postBlurSize", int_t,    0, "Aperture size for the Blur() operator.", 13, 3, 31)
gen.add("postBlurSigma", double_t,    0, "Sigma for the GaussianBlur() operator.", 3.2, 0.0, 10.0)
gen.add("apply_blur_post", bool_t,   0, "Flag, applying GaussianBlur() to output(edge) image", False)

gen.add("L2gradient",   bool_t,   0, "Flag, indicating whether a more accurate  L_2 norm should be used to calculate the image gradient magnitude ( L2gradient=true ), or whether the default  L_1 norm is enough ( L2gradient=false ).", False)

lsd_refine_type = gen.enum([ gen.const("REFINE_NONE", int_t,  0, "No refinement applied"),
                             gen.const("REFINE_STD",  int_t,  1, "Standard refinement is applied. E.g. breaking arches into smaller straighter line approximations."),
                             gen.const("REFINE_ADV",  int_t,  2, "Advanced refinement. Number of false alarms is calculated, lines are"),], "An enum for Line Segment Detector Modes")
gen.add("lsd_refine_type", int_t, 0, "Line Segment Detector Modes", 0, 0, 2, edit_method=lsd_refine_type)
gen.add("lsd_scale", double_t,    0, "The scale of the image that will be used to find the lines. Range (0..1]", 0.8, 0.0000001, 1.0);
gen.add("lsd_sigma_scale", double_t,    0, "Sigma for Gaussian filter. It is computed as sigma = _sigma_scale/_scale", 0.6, 0.0, 10.0);
gen.add("lsd_quant", double_t,    0, "Bound to the quantization error on the gradient norm.", 2.0, 1.0, 100.0);
gen.add("lsd_angle_threshold", double_t,    0, "Gradient angle tolerance in degrees.", 22.5, 0.0, 179.0);
gen.add("lsd_log_eps", double_t,    0, "Detection threshold: -log10(NFA) > log_eps. Used only when advancent refinement is chosen.", 0.0, 0.0, 360.0);
gen.add("lsd_density_threshold", double_t,    0, "Minimal density of aligned region points in the enclosing rectangle.", 0.7, 0.0, 1.0);
gen.add("lsd_n_bins", int_t,    0, "Number of bins in pseudo-ordering of gradient modulus.", 1024, 0, 10240)
gen.add("lsd_line_length_threshold", double_t,    0, "Threshold of line length.", 100.0, 0.0, 1000.0)

exit(gen.generate(PACKAGE, "edge_detection", "EdgeDetection"))
